services:
  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile.dev
    container_name: backend
    env_file: ./.env.dev
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ./backend/src:/app/src
      - ./backend/test:/app/test
      - ./shared/dist:/app/node_modules/shared
    depends_on:
      - db
      - redis

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env.dev
    volumes:
      - ./frontend/src:/nextapp/src
      - ./frontend/public:/nextapp/public
      - ./shared/dist:/nextapp/node_modules/shared
      - ./frontend/tailwind.config.ts:/nextapp/tailwind.config.ts
    restart: always
    ports:
      - 3000:3000

  db:
    image: postgres:latest
    container_name: db
    restart: on-failure
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    #   PG_DATA: /var/lib/postgresql/data
    # volumes:
    #   - pgdata:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    command: -p ${DB_PORT}

  redis:
    image: redis:latest
    ports: 
      - ${REDIS_PORT}:${REDIS_PORT}
    env_file: ./.env.dev
    command: redis-server --requirepass ${REDIS_PASS} --port ${REDIS_PORT}
  
  # localstack:
  #   image: localstack/localstack:latest
  #   network_mode: bridge
  #   ports:
  #     - 4566:4566
  #   environment:
  #     - LAMBDA_DOCKER_NETWORK=bridge
  #     - AWS_DEFAULT_REGION=us-east-1
  #     - DEBUG=1
  #     - DOCKER_HOST=unix:///var/run/docker.sock 
  #   volumes:
  #     #- ./init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
  #     - ./localstack:/var/lib/localstack
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  
# volumes:
#   pgdata:

  